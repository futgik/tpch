package com.sap.tpch.types;

import com.sap.tpch.config.TPCHConfig;
import com.sap.tpch.db_interaction.DBExecutor;
import com.sap.tpch.db_interaction.DBInstance;
import com.sap.tpch.exception.ExecutionException;
import com.sap.tpch.exception.PrepException;
import com.sap.tpch.remoute.DatabaseState;
import com.sap.tpch.exception.SFException;
import com.sap.tpch.exec.RemoteExecutor;
import com.sap.tpch.tables.DBService;
import com.sap.tpch.tables.base.BTSupplier;
import com.sap.tpch.tables.hana.HNSupplier;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Created by Alex on 20.09.2014.
 * Present scale factor.
 */
public class ScaleFactor {
    //available factor values
    final static int AVAILABLE_SCALE_FACTORS[] = {1,10,30,100,300,1000,3000,10000,30000,100000};
    int SCALE_FACTOR = -1;
    final String DEFINE_SCALE_FACTORS_QUERY = "select count(*)/%s as SCALE_FACTOR from %s.%s";
    final String DEFINE_SCALE_FACTORS_FORM_FILE = "IFS=' ' read -a array <<< $(wc -l %s/%s) && echo $((${array[0]}/%d))";

    List<ScaleFactorEventListener> eventListener = new ArrayList<>();

    public static interface ScaleFactorEventListener{
        public void scaleFactorChanged();
    }

    public void addListener(ScaleFactorEventListener l){
        eventListener.add(l);
    }

    public void deleteListener(ScaleFactorEventListener l){
        eventListener.remove(l);
    }

    /**
     * Set scale factor
     * Available scale factors values: 1,10,30,100,300,1000,3000,10000,30000,100000
     * @param scaleFactor value of scale factor.
     * @throws SFException
     */
    public void setScaleFactor(int scaleFactor) throws SFException {
        int pos = Arrays.binarySearch(AVAILABLE_SCALE_FACTORS, scaleFactor);
        if (pos < 0) throw new SFException(String.format("Invalid scale factor value %d",pos));
        SCALE_FACTOR = scaleFactor;
        for(ScaleFactorEventListener l : eventListener){
            l.scaleFactorChanged();
        }
    }

    /**
     * Default scale factor initialization.
     */
    public ScaleFactor(){
        try {
            updateScaleFactorFromDatabase();
        }catch (SQLException | SFException e){
            SCALE_FACTOR = -1;
        }
    }

    /**
     * Set scale factor
     * Available scale factors: 1,10,30,100,300,1000,3000,10000,30000,100000
     * @param scaleFactor value of scale factor.
     * @throws SFException
     */
    public ScaleFactor(int scaleFactor) throws SFException{
        setScaleFactor(scaleFactor);
    }


    /**
     * Get scale factor
     * If scale factor not set yet
     * try to define scale factor using test database table if database have data.
     * Another case define scale factor using generated by dbgen file.
     * @return scale factor.
     */
    public int getScaleFactorValue() {
        if(SCALE_FACTOR > 0) return SCALE_FACTOR;
        return updateScaleFactor();
    }

    private int updateScaleFactor(){
        if(DatabaseState.isDatabaseExist()){
            try {
                updateScaleFactorFromDatabase();
            }catch(Exception e){
                SCALE_FACTOR = -1;
            }
        }
        return SCALE_FACTOR;
    }

    /**
     * Define scale factor using database table data.
     * @return scale factor.
     * @throws SQLException
     */
    public ScaleFactor updateScaleFactorFromDatabase() throws SQLException, SFException{
        DBExecutor executor = DBInstance.getDBInstance();
        ResultSet rs = executor.executeQuery(String.format(DEFINE_SCALE_FACTORS_QUERY, new BTSupplier().getBaseRowsNumber(), TPCHConfig.SCHEMA_NAME, DBService.getTableName(HNSupplier.class)));
        rs.next();
        setScaleFactor(rs.getInt("SCALE_FACTOR"));
        return this;
    }

    /**
     * Define scale factor using generated file.
     * @return scale factor.
     * @throws SFException
     */
    public ScaleFactor updateScaleFactorFromFile() throws SFException{
        try {
            setScaleFactor(Integer.parseInt(
                    RemoteExecutor.getRemoteCommandExecutor().execSingleRowCommand(String.format(
                            DEFINE_SCALE_FACTORS_FORM_FILE,
                            TPCHConfig.SERVER_DBGEN_DIR, new HNSupplier(this).getGeneratedTableName(),
                            new BTSupplier().getBaseRowsNumber()))
            ));
            return this;
        }
        catch (SFException | ExecutionException e){
            throw new SFException("Can't update scale factor from file",e);
        }
    }

    /**
     * Get stream count
     * @return stream count according to stream count.
     */
    public int getStreamCount(){
        return Arrays.binarySearch(AVAILABLE_SCALE_FACTORS,SCALE_FACTOR)+2;
    }
}
